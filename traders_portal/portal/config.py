import firebase_admin
from firebase_admin import credentials, auth
from rest_framework.response import Response
from rest_framework import status
from .models import Users
import jwt

#### The below secret key and firebase credentials should be sored in env file or some safe place and fetch them
secret_key = "your_secret_key"

FIREBASE_CREDS = {
  "type": "service_account",
  "project_id": "portal-auth-xxxxx",
  "private_key_id": "53beafacff670f556ae1df40fa56d511dcaxxxxx",
  "private_key": "-----BEGIN PRIVATE KEY-----\xxxxxvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCeRS+m0NL1TKsx\nTNwpmjK6M3INHT9ZA9SCqClfbf/bCetaTMdVuY1PoogECTFt8I6Mb9pLxuxxDeq2\nZtAbmKLlaMzuOqh9k45ETjkXNJWbOQMumaAhujbJqj7ED2jBFmINbVfvaYn8njvo\nT128mx9VTCU9WsSO4fgRIYO2QsWPVgQisCul4g2cJiSAMT4hXdcsKQDOFhRCxodQ\nrwgEKAH0qHP9vgvi9oVWXmXSDaUavySih4bkvThUWnKWT9FeU4oH+9llCLBuoGXx\nIM1dwQdFCZIgXE7SQvqHLHZOxQjFPWOGBM0au4DLpqsXT6Kgi3B8jsyNAx5R4FOB\nGnCCZfh1AgMBAAECggEAFyuk0sSupbfQNjr83mBTPdxLPa1C+WqsoWYyDGUDuJMG\nsCUeZ6fvDrIKPKEF6gT2MYwshrx8H/78FjEOFYQukOxbWCMhSKUiBlD3XbTWlC9w\nDlHyVg23eKWiY7ynxuDagQG5hnTKfT/DIHsCC5sgJrIrn4Ra01o0oXlpGXVEC/w+\nLqul9zcOVSGlcULr2wPp/GQfA3FErwOKVqJ+jaeS6ABZwkq66QYmXCXSIfHtjArS\nAGHz18CY/zjk3smh/3EJw8e7/4ywzAKTMXww4Qk2j9jjZhuSJ0Xfaw/zZpkZgGzK\njFWyumcCDTgw3c3xKaAnqVZFISlNDp8tgMe9mL1l7wKBgQDYTfmUHFCRuvCTHmkw\n0k1psnhht+VmeU1QYxiPJaE4MSAC6tbAmkLRSoy1fmZOjX2MUndRPgoMrKF/6/6S\nygfx0wEQLKG6TPuKdt1q8171eevuubFyOTMTQqXBwvRo9ME062SIGmsnWtfLPt/J\nCh6H2Pyct3sGAEjThpA82VBQfwKBgQC7UL+zQA8Wgo465RZEWvvbFws8Y3Cy5wSN\nOecSxEt1jbVoPQIGJO7mev97Gj7ui9vlQhHicCMKkwiT5kWJa5B38KJC3n4IN2gS\nBvk9KVfmrHx5BFGM3PC4beL/xk1AxcqIySBJsc8rgGkbbSdlX19A1hvF8tf2KvoL\n347SMRv9CwKBgQCaldd5T2cRT02hhslcl9+1W1QHWjq7KpPjkH67xwPaOdmL3DOQ\nQG7iTmoTR3tsRlhkkYcua60Y88MTviAY3gQhglAvNAZ9M4lNoreJONczjmfcG5/C\nZzimWipGOMMdw1XVMSmOz3qnDJhOa+fZML8zDRM0GTj1x/xEF9Y7dn+clwKBgQCm\nS+cVNW7vthKdmNqu7vOgK5IvF71rJwv0cY6DK8AuahO+qkMMv2dVOadtW/y4/XPI\n0mJcXN/POIAqBgqAGP3Wbc0wfqT3mHENaCGIOhcu1L1hFwNrgo83vV8FYsEdGzxX\nOfAvXOunHEa0MbEDH6vKPQvFLnaqtrbtKZl7ZFwLxwKBgHCL1bW5dFSCGfV9hwjl\ny5sO848hegeOgVZwtNjstLmkk8t70vVyxsWi1dIwcL+5dnwJX6X+o8i26WtaGMcC\nnfzXrMnB0xizy9wb7CUTfBrCRtJJXdCZRTFilN5zmdpZGzb6ykpma6xQnWChBx+L\nlU8xFI1/aNqT5Q9aO6khLdO1\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-yqipl@portal-auth-xxxxx.iam.gserviceaccount.com",
  "client_id": "1068463289633051xxxxx",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-yqipl%40portal-auth-xxxxx.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}


cred = credentials.Certificate(FIREBASE_CREDS)
firebase_admin.initialize_app(cred)

############# The Below code is for verifying token generated by firebase ##############
def authenticate_firebase_token(token):
        try:
            if not token:
                return Response('Token not provided.', status=status.HTTP_401_UNAUTHORIZED)
            
            #this will verify the token only when the token is comin from the client side
            decoded_token = auth.verify_id_token(token)
            user_id = decoded_token.get('uid')

            if user_id:
                try:
                    user = Users.objects.get(id=user_id)
                    return user
                except Users.DoesNotExist:
                    return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)

        except jwt.ExpiredSignatureError:
            return Response('Token has expired', status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response('Invalid token', status=status.HTTP_401_UNAUTHORIZED)

        return Response('Access denied', status=status.HTTP_401_UNAUTHORIZED)


############# The Below code is for verifying token generated by simple jwt ##############

# def authenticate(token):
#         try:
#             if not token:
#                 return Response('Token not provided.', status=status.HTTP_401_UNAUTHORIZED)
#             if not secret_key:
#                 return Response('Access denied. Invalid secret key.', status=status.HTTP_401_UNAUTHORIZED)

#             payload = jwt.decode(token, secret_key, algorithms=['HS256'])
#             user_id = payload.get('user_id')

#             if user_id:
#                 try:
#                     user = Users.objects.get(id=user_id)
#                     return user
#                 except Users.DoesNotExist:
#                     return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)

#         except jwt.ExpiredSignatureError:
#             return Response('Token has expired', status=status.HTTP_401_UNAUTHORIZED)
#         except jwt.InvalidTokenError:
#             return Response('Invalid token', status=status.HTTP_401_UNAUTHORIZED)

#         return Response('Access denied', status=status.HTTP_401_UNAUTHORIZED)
    
